barplot(ar.value, names.arg=study.labels, las=2, horiz=FALSE, cex.names=0.8, main="Median AR Expression", col=study.cols, ylim=c(0, 10))
?boxplot
boxplot(log2(ar.exp$Value))
?boxplot
?boxplot
stripchart(log2(ar.exp$Value), method="jitter", add=TRUE)
?stripchart
boxplot(log2(ar.exp$Value))
stripchart(log2(ar.exp$Value), method="jitter", add=TRUE)
boxplot(log2(ar.exp$Value))
stripchart(log2(ar.exp$Value), method="jitter", vertical=TRUE, add=TRUE)
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.5, add=TRUE)
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.5, vertical=TRUE, add=TRUE)
boxplot(log2(ar.exp$Value))
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.2, vertical=TRUE, add=TRUE)
boxplot(log2(ar.exp$Value))
boxplot(log2(ar.exp$Value + 0.01))
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.2, vertical=TRUE, add=TRUE, pch=1)
boxplot(log2(ar.exp$Value + 0.01))
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.2, vertical=TRUE, add=TRUE, pch=1)
boxplot(log2(ar.exp$Value + 0.01))
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.1, vertical=TRUE, add=TRUE, pch=1)
boxplot(log2(ar.exp$Value + 0.01))
stripchart(log2(ar.exp$Value), method="jitter", jitter=0.15, vertical=TRUE, add=TRUE, pch=1)
boxplot(log2(ar.exp$Value + 0.01))
stripchart(log2(ar.exp$Value + 0.01), method="jitter", jitter=0.15, vertical=TRUE, add=TRUE, pch=1)
head(ar.exp)
ar.value
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols)
?par
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex.pts=0.5)
args(boxplot)
args(log)
?points
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5)
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=1)
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5)
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies")
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression")
boxplot(log2(ar.exp$Value) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
boxplot(log2(ar.exp$Value + 0.1) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
temp<- boxplot(log2(ar.exp$Value + 0.1) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
length(temp)
names(temp)
temp[[1]]
temp[[2]]
ar.values
ls()
ar.value <- sort(ar.value, decreasing=TRUE)
ar.value
ar.exp$Value <- factor(ar.exp$Value, levels=names(ar.value))
table(ar.exp$Value)
'study.labels <- substr(names(ar.value), start=1, stop=15)
``
study.labels <- substr(names(ar.value), start=1, stop=15)
boxplot(log2(ar.exp$Value + 0.1) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
boxplot(log2(ar.exp$Value + 0.1) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
ar.exp <- read.delim("AR_Expression_cBioPortal.txt", header=TRUE, sep="\t", as.is=TRUE))
ar.exp <- read.delim("AR_Expression_cBioPortal.txt", header=TRUE, sep="\t", as.is=TRUE)
ar.exp$Cancer.Study <- factor(ar.exp$Cancer.Study, levels=names(ar.value)
)
boxplot(log2(ar.exp$Value + 0.1) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.5, main="AR Expression Across Cancer Studies", ylab="AR Expression (log2)")
abline(h=median(ar.exp$Value), lty=2)
abline(h=median(log2(ar.exp$Value + 0.01)), lty=2)
my.aov <- aov(ar.exp$Value ~ ar.exp$Cancer.Study)
summary(my.aov)
my.hsd <- TukeyHSD(my.aov)
pot(my.hsd)
plot(my.hsd)
plot(my.hsd[1:10])
my.hsd
dim(my.hsd)
length(my.hsd)
names(my.hsd)
plot(my.hsd, las=2)
plot(my.hsd, las=2, cex=0.1)
plot(my.hsd, las=2, cex.labels=0.1)
plot(my.hsd, las=2, cex.names=0.1)
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2)
warnings()
par(mai=c(2, 1, 1, 0.5))
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2)
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, cex=0.8)
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, main="AR Expression Across Cancer Studies")
table(ar.exp$Cancer.Study, high.ar)
?write
?write.table
list.files()
getwd()
list.files()
getwd()
normalizePath("~")
my.tbl <- table(1:10, 11:20)
my.tbl
write.table(my.tbl, file="test.txt")
list.files()
readLines(test.txt)
readLines("text.txt")
readLines("test.txt")
read.table("test.txt")
class(my.tbl)
rm(my.tbl)
unlink("text.txt")
list.files()
?unlink
file.remove("text.txt")
list.files()
read.table("test.txt")
file.exists("text.txt")
list.files()
write.table(my.tbl)
my.tbl <- table(1:10, 11:20)
write.table(my.tbl)
write.table(ar.exp, file="AR_Expression.txt", quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE
)
list.files()
?readLines
readLines("AR_Expression.txt", n=10)
?read.delim
head(read.delim("AR_Expression.txt"))
?data.frame
ar.exp2 <- read.delim(file="AR_Expression.txt", as.is=TRUE)
head(ar.exp2)
identical(ar.exp, ar.exp2)
head(ar.exp)
tail(ar.exp)
ar.exp2$Cancer.Study <- factor(ar.exp2$Cancer.Study, levels=names(ar.value))
identical(ar.exp, ar.exp2)
sample(LETTERS, 5)
paste(sample(LETTERS, 5), collapse="")
library("swirlify", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
wq_multiple()
wq_multiple()
wq_multiple()
detach("package:swirlify", unload=TRUE)
colnames(ar.exp)
dim(ar.exp[ar.exp$Value==0,])
sort(table(ar.exp$Mutation))
table(ar.exp$Cancer.Study)
ar.exp$Cancer.Study[ar.exp$Mutation == "Q58L"]
uninstall_course("IntoToR")
install_course_directory("Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
list.files("Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
list.files("Documents/Purdue/Collaborations/bd2k/Swirl_Courses")
list.files("Documents/Purdue/Collaborations/bd2k")
install_course_directory("~/Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
swirl()
uninstall_course("IntoToR")
uninstall_course("IntroToR")
install_course_directory("~/Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
swirl()
uninstall_course("IntroToR")
install_course_directory("~/Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
swirl()
uninstall_course("IntroToR")
install_course_directory("~/Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
swirlO()
swirl()
bye()
uninstall_course("IntroToR")
install_course_directory("~/Documents/Purdue/Collaborations/bd2k/Swirl_Courses/IntroToR")
swirl()
vectorPlot()
vectorPlotScramled()
vectorPlotScrambled()
dataframePlot()
dataframeSortPlot()
ls()
class(ar.exp)
head(ar.exp, n=10)
tail(ar.exp, n=10)
dim(ar.exp)
summary(ar.exp)
help(Extract)
head(ar.exp$Cancer.Study)
head(ar.exp[["Cancer.Study"]])
ar.exp[1:10, "Cancer.Study"]
study.tbl <- table(ar.exp$Cancer.Study)
study.tbl
study.tbl <- sort(study.tbl, decreasing=TRUE)
study.tbl
study.labels <- substr(names(study.tbl), start=1, stop=15)
study.labels
barplot(study.tbl, names.arg=study.labels, las=2, cex.names=0.8, main="Sample Count for Cancer Studies")
?par
par(mai=c(2, 1, 1, 0.5))
study.cols <- rainbow(n=length(study.labels), s=0.8, v=0.9
)
barplot(study.tbl, names.arg=study.labels, las=2, horiz=FALSE, cex.names=0.8, main="Sample Count for Cancer Studies", col=study.cols, ylim=c(0, 1200))
high.ar <- log2(ar.exp$Value) >= 10
high.ar.study.tbl <- table(ar.exp$Cancer.Study[high.ar])
high.ar.study.tbl
ar.exp$Cancer.Study <- factor(ar.exp$Cancer.Study, levels=names(study.tbl))
high.ar.study.tbl <- table(ar.exp$Cancer.Study[high.ar])
high.ar.study.tbl
table(ar.exp$Cancer.Study, high.ar)
ar.value <- tapply(log2(ar.exp$Value), INDEX=ar.exp$Cancer.Study, FUN=median)
ar.value
barplot(ar.value, names.arg=study.labels, las=2, horiz=FALSE, cex.names=0.8, main="Median AR Expression", col=study.cols, ylim=c(0, 10))
boxplot(log2(ar.exp$Value + 0.01))
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, main="AR Expression Across Cancer Studies")
ar.value <- sort(ar.value, decreasing=TRUE)
ar.exp$Cancer.Study <- factor(ar.exp$Cancer.Study, levels=names(ar.value))
study.labels <- substr(names(ar.value), start=1, stop=15)
boxplot(log2(ar.exp$Value + 0.01) ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, main="AR Expression Across Cancer Studies")
list.files()
?write.table
write.table(ar.exp, file="AR_Expression.txt", quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE)
write.table(ar.exp, file="AR_Expression.txt", quote=FALSE, sep="\t")
list.files()
?read.delim
ar.exp2 <- read.delim(file="AR_Expression.txt", as.is=TRUE)
head(ar.exp2, 10)
identical(ar.exp, ar.exp2)
ar.exp2$Cancer.Study <- factor(ar.exp2$Cancer.Study, levels=names(ar.value))
ar.exp$Cancer.Study <- factor(ar.exp$Cancer.Study, levels=names(ar.value))
identical(ar.exp, ar.exp2)
421
"Q58L"
ar.exp$Cancer.Studies[ar.exp$Mutation == "Q58L"]
colnames(ar.exp)
ar.exp$Cancer.Studu[ar.exp$Mutation == "Q58L"]
ar.exp$Cancer.Study[ar.exp$Mutation == "Q58L"]
write("Lesson03_JVEZM", file="~/BigTapSwirl/lessonKeys.txt", append=TRUE)
list.files(!)
list.files(~)
list.files("~")
bye()
ls()
head(ar.value)
ar.value2
ar.value2 <- ar.value
ar.value <- scan("../Lesson02Vectors/ar_value.txt"), sep="\t")
ar.value <- scan("../Lesson02Vectors/ar_value.txt", sep="\t")
list.files("..")
ar.value <- scan("../Lesson02_Vectors/ar_value.txt", sep="\t")
ar.value
cbind(ar.value, ar.value2)
ar.value <- sort(ar.value)
cbind(ar.value, ar.value2)
ar.value <- sort(ar.value, decreasing=TRUE)
cbind(ar.value, ar.value2)
ar2.value <- log2(ar.exp$Value + 0.001)
cbind(ar.value, ar2.value)
ar2.value <- sort(ar2.value, decreasing=T)
cbind(ar.value, ar2.value)
head(ar.value)
head(ar2.value)
ar.value <- scan("../Lesson02_Vectors/ar_value.txt", sep="\t")
which.min(ar.value)
ar.value[17]
ls()
which.min(ar.value2)
ar.value2[30]
head(ar.value)
ar.value <- sort(ar.value, decreasing=T)
cbind(ar.value, ar.value2)
log2(0.01)
ar.value <- tapply(log2(ar.exp$Value + 0.01), ar.exp$Cancer.Study, median)
ar.value <- sort(ar.value, decreasing=T)
cbind(ar.value, ar.value2)
ar.value <- tapply(log2(ar.exp$Value + 0.001), ar.exp$Cancer.Study, median)
ar.value <- sort(ar.value, decreasing=T)
cbind(ar.value, ar.value2)
min(ar.exp$Value)
min(ar.exp$Value[ar.exp$Value > 0])
temp <- log[0.1 * ar.exp$Value  +((0.1^2 * ar.exp$Value^2) + 1)^0.5]/0.1
temp <- log(0.1 * ar.exp$Value  +((0.1^2 * ar.exp$Value^2) + 1)^0.5)/0.1
head(temp)
head(ar.exp$Value)
temp <- log(0.9 * ar.exp$Value  +((0.9^2 * ar.exp$Value^2) + 1)^0.5)/0.9
head(temp)
head(ar.exp$Value)
head(log2(ar.exp$Value))
qqnorm(temp)
qqnorm(log2(ar.exp$Value + 0.001))
raw
theta
?"inverse hyperbolic"
??"inverse hyperbolic"
invHyperbolicSineTransform <- function(raw.data, theta){
trans.data <- log(theta * raw.data  +((theta^2 * raw.data^2) + 1)^0.5)/theta
return(trans.data)
}
temp <- invHyperbolicSineTransform(ar.exp$Value, 0.1)
head(temp)
temp2 <- log2(ar.exp$Value + 0.01)
plot(temp2, temp)
temp2 <- log2(ar.exp$Value + 0.1)
plot(temp2, temp)
temp <- invHyperbolicSineTransform(ar.exp$Value, 0.01)
temp2 <- log2(ar.exp$Value + 0.01)
plot(temp2, temp)
plot(temp2, ar.exp$Value)
plot(temp, ar.exp$Value)
ar.value <- tapply(log2(ar.exp$Value + 0.01), ar.exp$Cancer.Study, median)
getwd()
cat(ar.value, file="../Lesson02_Vectors/ar_value.txt", sep="\t")
head(ar.exp)
sort(table(ar.exp$Mutation))
library("swirlify", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
set_lesson()
set_lesson()
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
sort(table(ar.exp$Mutation))
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
table(ar.exp$Mutation)
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
write("Lesson01_DJYSX", file="~/BigTapSwirl/lessonKeys.txt")
dir.create("~/BigTapSwirl")
write("Lesson01_DJYSX", file="~/BigTapSwirl/lessonKeys.txt")
write("Lesson02_RGKPS", file="~/BigTapSwirl/lessonKeys.txt", append=TRUE)
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
ls()
rm(list=ls())
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
ls()
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
log2(0.01)
ls()
ls()
log2(1)
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
suppressPackageStartupMessages(library(swirl))
## make function to generate a plot that illustrates parallel vectors
vectorPlot <- function(){
plot(c(0, 1), c(0, 1), type="n", yaxt="n", xaxt="n", ylab="", xlab="",
bty="n", main="Parallel Vectors")
text(x=c(0.2, 0.5, 0.8), y=0.9, labels=c("A", "B", "C"), pos=3)
arrows(0.2, 0.9, 0.2, 0.1, col="red2", lty=1, lwd=20, lend="butt")
text(x=0.2, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
arrows(0.5, 0.9, 0.5, 0.1, col="deepskyblue2", lty=1, lwd=20, lend="butt")
text(x=0.5, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
arrows(0.8, 0.9, 0.8, 0.1, col="green2", lty=1, lwd=20, lend="butt")
text(x=0.8, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
segments(x0=0.2, y0=seq(from=0.8, to=0.2, by=-0.1), x1=0.8, y1=seq(from=0.8, to=0.2, by=-0.1), lty=2)
}
vectorPlotScrambled <- function(){
plot(c(0, 1), c(0, 1), type="n", yaxt="n", xaxt="n", ylab="", xlab="",
bty="n", main="Scrambled Vectors")
text(x=c(0.2, 0.5, 0.8), y=0.9, labels=c("A", "B", "C"), pos=3)
arrows(0.2, 0.9, 0.2, 0.1, col="red2", lty=1, lwd=20, lend="butt")
text(x=0.2, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
arrows(0.5, 0.9, 0.5, 0.1, col="deepskyblue2", lty=1, lwd=20, lend="butt")
text(x=0.5, y=seq(from=0.8, to=0.2, by=-0.1), labels=c(6, 7, 2, 3, 1, 5, 4))
arrows(0.8, 0.9, 0.8, 0.1, col="green2", lty=1, lwd=20, lend="butt")
text(x=0.8, y=seq(from=0.8, to=0.2, by=-0.1), labels=c(2, 1, 5, 6, 4, 7, 3))
}
dataframePlot <- function(){
plot(c(0, 1), c(0, 1), type="n", yaxt="n", xaxt="n", ylab="", xlab="",
bty="n", main="Data Frame")
text(x=c(0.2, 0.5, 0.8), y=0.9, labels=c("A", "B", "C"), pos=3)
segments(0.2 , 0.86, 0.8, 0.86, lwd=20, col="grey50", lend="butt")
arrows(0.2, 0.9, 0.2, 0.1, col="red2", lty=1, lwd=20, lend="butt")
text(x=0.2, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
arrows(0.5, 0.9, 0.5, 0.1, col="deepskyblue2", lty=1, lwd=20, lend="butt")
text(x=0.5, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
arrows(0.8, 0.9, 0.8, 0.1, col="green2", lty=1, lwd=20, lend="butt")
text(x=0.8, y=seq(from=0.8, to=0.2, by=-0.1), labels=1:7)
segments(x0=0.2, y0=seq(from=0.8, to=0.2, by=-0.1), x1=0.8, y1=seq(from=0.8, to=0.2, by=-0.1), lty=2)
}
dataframeSortPlot <- function(){
plot(c(0, 1), c(0, 1), type="n", yaxt="n", xaxt="n", ylab="", xlab="",
bty="n", main="Sorted Data Frame")
text(x=c(0.2, 0.5, 0.8), y=0.9, labels=c("A", "B", "C"), pos=3)
segments(0.2 , 0.86, 0.8, 0.86, lwd=20, col="grey50", lend="butt")
arrows(0.2, 0.9, 0.2, 0.1, col="red2", lty=1, lwd=20, lend="butt")
text(x=0.2, y=seq(from=0.8, to=0.2, by=-0.1), labels=c(7, 5, 3, 1, 6, 4, 2))
arrows(0.5, 0.9, 0.5, 0.1, col="deepskyblue2", lty=1, lwd=20, lend="butt")
text(x=0.5, y=seq(from=0.8, to=0.2, by=-0.1), labels=c(7, 5, 3, 1, 6, 4, 2))
arrows(0.8, 0.9, 0.8, 0.1, col="green2", lty=1, lwd=20, lend="butt")
text(x=0.8, y=seq(from=0.8, to=0.2, by=-0.1), labels=c(7, 5, 3, 1, 6, 4, 2))
segments(x0=0.2, y0=seq(from=0.8, to=0.2, by=-0.1), x1=0.8, y1=seq(from=0.8, to=0.2, by=-0.1), lty=2)
}
.get_course_path <- function(){
tryCatch(swirl:::swirl_courses_dir(),
error = function(c) {file.path(find.package("swirl"),"Courses")}
)
}
try(ar.exp <- read.delim(file.path(.get_course_path(), "IntroToR", "Lesson03_Dataframes", "AR_Expression_cBioPortal.txt"), header=TRUE, sep="\t", as.is=TRUE))
vectorPlot()
vectorPlotScrambled()
dataframePlot()
dataframeSortPlot()
ls()
class(ar.exp)
head(ar.exp, n=10)
tail(ar.exp, n=10)
dim(ar.exp)
summary(ar.exp)
help(Extract)
head(ar.exp$Cancer.Study)
head(ar.exp[["Cancer.Study"]])
ar.exp[1:10, "Cancer.Study"]
study.tbl <- table(ar.exp$Cancer.Study)
study.tbl
study.tbl <- sort(study.tbl, decreasing=TRUE)
study.tbl
study.labels <- substr(names(study.tbl), start=1, stop=15)
study.labels
barplot(study.tbl, names.arg=study.labels, las=2, cex.names=0.8, main="Sample Count for Cancer Studies")
?par
par(mai=c(2, 1, 1, 0.5))
study.cols <- rainbow(n=length(study.labels), s=0.8, v=0.9)
barplot(study.tbl, names.arg=study.labels, las=2, horiz=FALSE, cex.names=0.8, main="Sample Count for Cancer Studies", col=study.cols, ylim=c(0, 1200))
ar.exp$Value <- log2(ar.exp$Value + 0.01)
summary(ar.exp$Value)
high.ar <- ar.exp$Value >= 10
high.ar.study.tbl <- table(ar.exp$Cancer.Study[high.ar])
high.ar.study.tbl
ar.exp$Cancer.Study <- factor(ar.exp$Cancer.Study, levels=names(study.tbl))
high.ar.study.tbl <- table(ar.exp$Cancer.Study[high.ar])
high.ar.study.tbl
table(ar.exp$Cancer.Study, high.ar)
ar.value <- tapply(ar.exp$Value, INDEX=ar.exp$Cancer.Study, FUN=median)
ar.value
barplot(ar.value, names.arg=study.labels, las=2, horiz=FALSE, cex.names=0.8, main="Median AR Expression", col=study.cols, ylim=c(0, 10))
boxplot(ar.exp$Value)
boxplot(ar.exp$Value ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, main="AR Expression Across Cancer Studies")
ar.value <- sort(ar.value, decreasing=TRUE)
ar.exp$Cancer.Study <- factor(ar.exp$Cancer.Study, levels=names(ar.value))
study.labels <- substr(names(ar.value), start=1, stop=15)
boxplot(ar.exp$Value ~ ar.exp$Cancer.Study, names=study.labels, col=study.cols, las=2, main="AR Expression Across Cancer Studies")
list.files()
?write.table
write.table(ar.exp, file="AR_Expression.txt", quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE)
list.files()
?read.delim
ar.exp2 <- read.delim(file="AR_Expression.txt", as.is=TRUE)
head(ar.exp2, 10)
identical(ar.exp, ar.exp2)
ar.exp2$Cancer.Study <- factor(ar.exp2$Cancer.Study, levels=names(ar.value))
identical(ar.exp, ar.exp2)
421
ar.exp$Cancer.Study[ar.exp$Mutation == "Q58L"]
write("Lesson03_JVEZM", file="~/BigTapSwirl/lessonKeys.txt", append=TRUE)
ls()
head(ar.exp)
head(ar.exp2)
identical(ar.exp[, 1], ar.exp[, 2])
identical(ar.exp[, 1], ar.exp[, 1])
sapply(1:6, function(x)(identical(ar.exp[, x], ar.exp2[, x])))
sapply(ar.exp, class)
sapply(ar.exp2, class)
print(ar.exp$Value, digits=22)
print(ar.exp2$Value, digits=22)
print(ar.exp$Value[1:10], digits=22)
print(ar.exp2$Value[1:10], digits=22)
ar.exp <- read.delim(file.path("AR_Expression_cBioPortal.txt"), header=TRUE, sep="\t", as.is=TRUE)
head(ar.exp)
head(ar.exp2)
head(signif(ar.exp2, digits=4))
head(signif(ar.exp2$Value, digits=4))
head(signif(ar.exp2$Value, digits=4), 20)
head(signif(ar.exp$Value, digits=4), 20)
head(round(ar.exp$Value, digits=4), 20)
head(ar.exp$Value)
head(round(ar.exp2$Value, digits=4), 20)
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
head(ar.exp)
ar.exp$Value <- round(log2(ar.exp$Value + 0.01), digits=4)
min(ar.exp$Value)
table(ar.exp$Value <= 0)
table(ar.exp$Value < 0)
set_lesson()
set_lesson()
lesson_to_html(keep_rmd=TRUE, open_html=TRUE)
par(mar)
par$mar
par()
par("mai")
?.libPaths
.libPaths()
.?update
?install.packages()
12 - 2.5 - 1.5
8 * 8
?swirl
swirl()
bye()
?corrplot
?not
?`!`
?`%in%`
?affy
library(affy)
?display.brewer.all
library(RColorBrewer)
?display.brewer.all
?colors
col2rgb("blue")
?colorPalette
?colorRampPalette
?rma
?grep
?plotMDS
library(limma)
?plotMDS
